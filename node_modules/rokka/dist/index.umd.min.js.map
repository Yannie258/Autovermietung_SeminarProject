{"version":3,"file":"index.umd.min.js","sources":["../src/transport.js","../src/apis/render.js","../src/utils.js","../src/apis/index.js","../src/apis/memberships.js","../src/apis/operations.js","../src/apis/organizations.js","../src/apis/expressions.js","../src/apis/sourceimages.js","../src/apis/stackoptions.js","../src/apis/stacks.js","../src/apis/stats.js","../src/apis/users.js","../src/apis/billing.js","../src/response.js","../node_modules/strict-uri-encode/index.js","../node_modules/decode-uri-component/index.js","../node_modules/split-on-first/index.js","../node_modules/query-string/index.js","../src/index.js"],"sourcesContent":["import fetch from 'cross-fetch'\n// from https://github.com/jonbern/fetch-retry\n// and https://github.com/jonbern/fetch-retry/pull/27\nexport default (url, options) => {\n  let retries = 3\n  let retryDelay = 1000\n  let retryOn = [429, 502, 503, 504]\n  if (options && options.retries !== undefined) {\n    if (isPositiveInteger(options.retries)) {\n      retries = options.retries\n    } else {\n      throw new ArgumentError('retries must be a positive integer')\n    }\n  }\n\n  if (options && options.retryDelay !== undefined) {\n    if (\n      isPositiveInteger(options.retryDelay) ||\n      typeof options.retryDelay === 'function'\n    ) {\n      retryDelay = options.retryDelay\n    } else {\n      throw new ArgumentError(\n        'retryDelay must be a positive integer or a function returning a positive integer'\n      )\n    }\n  }\n\n  if (options && options.retryOn) {\n    if (\n      Array.isArray(options.retryOn) ||\n      typeof options.retryOn === 'function'\n    ) {\n      retryOn = options.retryOn\n    } else {\n      throw new ArgumentError('retryOn property expects an array or function')\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    const wrappedFetch = function (attempt) {\n      fetch(url, options)\n        .then(function (response) {\n          if (\n            Array.isArray(retryOn) &&\n            retryOn.indexOf(response.status) === -1\n          ) {\n            resolve(response)\n            return\n          }\n          if (typeof retryOn === 'function') {\n            if (retryOn(attempt, null, response)) {\n              retry(attempt, null, response)\n              return\n            }\n            resolve(response)\n            return\n          }\n          if (attempt < retries) {\n            retry(attempt, null, response)\n            return\n          }\n          resolve(response)\n        })\n        .catch(function (error) {\n          if (typeof retryOn === 'function') {\n            if (retryOn(attempt, error, null)) {\n              retry(attempt, error, null)\n              return\n            }\n            reject(error)\n            return\n          }\n          if (attempt < retries) {\n            retry(attempt, error, null)\n            return\n          }\n          reject(error)\n        })\n    }\n\n    function retry (attempt, error, response) {\n      const delay =\n        typeof retryDelay === 'function'\n          ? retryDelay(attempt, error, response)\n          : retryDelay\n      setTimeout(function () {\n        wrappedFetch(++attempt)\n      }, delay)\n    }\n\n    wrappedFetch(0)\n  })\n}\n\nfunction isPositiveInteger (value) {\n  return Number.isInteger(value) && value >= 0\n}\n\nfunction ArgumentError (message) {\n  this.name = 'ArgumentError'\n  this.message = message\n}\n","import { stringifyOperations } from '../utils'\n\n/**\n * ### Render\n *\n * @module render\n */\nexport default state => {\n  const render = {}\n\n  /**\n   * Get URL for rendering an image.\n   *\n   * ```js\n   * rokka.render.getUrl('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a', 'png', 'mystack')\n   * ```\n   *\n   * @param  {string}       organization name\n   * @param  {string}       hash         image hash\n   * @param  {string}       format       image format: `jpg`, `png` or `gif`\n   * @param  {string|array} [mixed]      optional stack name or an array of stack operation objects\n   * @return {string}\n   */\n  render.getUrl = (organization, hash, format, mixed) => {\n    const host = state.renderHost.replace('{organization}', organization)\n    const mixedParam = Array.isArray(mixed)\n      ? `dynamic/${stringifyOperations(mixed)}` // array of operations\n      : mixed // stack name\n    const stack = mixedParam || 'dynamic/noop'\n\n    return `${host}/${stack}/${hash}.${format}`\n  }\n\n  return {\n    render\n  }\n}\n","export function stringifyOperations (operations) {\n  operations = Array.isArray(operations) ? operations : [operations]\n\n  return operations\n    .map(operation => {\n      const name = operation.name\n      const options = Object.keys(operation.options || {})\n        .map(k => `${k}-${operation.options[k]}`)\n        .join('-')\n\n      if (!options) {\n        return name\n      }\n\n      return `${name}-${options}`\n    })\n    .join('--')\n}\n\nexport function isStream (stream) {\n  return (\n    stream !== null &&\n    typeof stream === 'object' &&\n    typeof stream.pipe === 'function'\n  )\n}\n","import memberships from './memberships'\nimport operations from './operations'\nimport organizations from './organizations'\nimport expressions from './expressions'\nimport render from './render'\nimport sourceimages from './sourceimages'\nimport stackoptions from './stackoptions'\nimport stacks from './stacks'\nimport stats from './stats'\nimport billing from './billing'\nimport users from './users'\n\nexport default state => {\n  return Object.assign(\n    {},\n    memberships(state),\n    operations(state),\n    organizations(state),\n    expressions(state),\n    render(state),\n    sourceimages(state),\n    stackoptions(state),\n    stacks(state),\n    stats(state),\n    users(state),\n    billing(state)\n  )\n}\n","/**\n * ### Memberships\n *\n * #### Roles\n *\n * - `rokka.memberships.ROLES.READ` - read-only access\n * - `rokka.memberships.ROLES.WRITE` - read-write access\n * - `rokka.memberships.ROLES.UPLOAD` - upload-only access\n * - `rokka.memberships.ROLES.ADMIN` - administrative access\n *\n * @module memberships\n */\nexport default state => {\n  const ROLES = {\n    READ: 'read',\n    WRITE: 'write',\n    UPLOAD: 'upload',\n    ADMIN: 'admin'\n  }\n  const memberships = { ROLES }\n\n  /**\n   * Add a member to an organization.\n   *\n   * ```js\n   * rokka.memberships.create('myorg', '613547f8-e26d-48f6-8a6a-552c18b1a290', [rokka.memberships.ROLES.WRITE])\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}        organization name\n   * @param  {string}        userId       UUID of user to add to the organization\n   * @param  {string|array}  roles        user roles (`rokka.memberships.ROLES`)\n   * @return {Promise}\n   */\n  memberships.create = (organization, userId, roles) => {\n    if (typeof roles === 'string') {\n      roles = [roles]\n    }\n\n    roles.forEach(role => {\n      if (\n        Object.keys(ROLES)\n          .map(key => ROLES[key])\n          .indexOf(role) === -1\n      ) {\n        return Promise.reject(new Error(`Invalid role \"${role}\"`))\n      }\n    })\n\n    const path = `organizations/${organization}/memberships/${userId}`\n\n    return state.request('PUT', path, { roles: roles })\n  }\n\n  /**\n   * Delete a member in an organization.\n   *\n   * ```js\n   * rokka.memberships.delete('myorg', '613547f8-e26d-48f6-8a6a-552c18b1a290')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}        organization name\n   * @param  {string}        userId       UUID of user to add to the organization\n   * @return {Promise}\n   */\n  memberships.delete = (organization, userId) => {\n    const path = `organizations/${organization}/memberships/${userId}`\n\n    return state.request('DELETE', path)\n  }\n\n  /**\n   * Create a user and membership associated to this organization.\n   *\n   * ```js\n   * rokka.memberships.createWithNewUser('myorg', [rokka.memberships.ROLES.READ])\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}        organization name\n   * @param  {array}  roles        user roles (`rokka.memberships.ROLES`)\n   * @return {Promise}\n   */\n  memberships.createWithNewUser = (organization, roles) => {\n    roles.forEach(role => {\n      if (\n        Object.keys(ROLES)\n          .map(key => ROLES[key])\n          .indexOf(role) === -1\n      ) {\n        return Promise.reject(new Error(`Invalid role \"${role}\"`))\n      }\n    })\n\n    const path = `organizations/${organization}/memberships`\n\n    return state.request('POST', path, { roles: roles })\n  }\n\n  /**\n   * Lists members in an organization.\n   *\n   * ```js\n   * rokka.memberships.list('myorg')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}        organization name\n   * @return {Promise}\n   */\n  memberships.list = organization => {\n    const path = `organizations/${organization}/memberships`\n\n    return state.request('GET', path)\n  }\n\n  /**\n   * Get info of a member in an organization.\n   *\n   * ```js\n   * rokka.memberships.get('myorg',userId)\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}        organization name\n   * @param  {string}        userId\n   * @return {Promise}\n   */\n  memberships.get = (organization, userId) => {\n    const path = `organizations/${organization}/memberships/${userId}`\n\n    return state.request('GET', path)\n  }\n\n  return {\n    memberships\n  }\n}\n","/**\n * ### Operations\n *\n * #### Available operations\n *\n * - `rokka.operations.resize(width, height, options = {})`\n * - `rokka.operations.autorotate(options = {})`\n * - `rokka.operations.rotate(angle, options = {})`\n * - `rokka.operations.dropshadow(options = {})`\n * - `rokka.operations.trim(options = {})`\n * - `rokka.operations.crop(width, height, options = {})`\n * - `rokka.operations.noop()`\n * - `rokka.operations.composition(width, height, mode, options = {})`\n * - `rokka.operations.blur(sigma, radius)`\n *\n * Please refer to the\n * [rokka API documentation](https://rokka.io/documentation/references/operations.html)\n *\n * @module operations\n */\nexport default state => {\n  const operations = {}\n\n  operations.resize = (width, height, options = {}) => {\n    options.width = width\n    options.height = height\n\n    return {\n      name: 'resize',\n      options\n    }\n  }\n\n  operations.autorotate = (options = {}) => {\n    return {\n      name: 'autorotate',\n      options\n    }\n  }\n\n  operations.rotate = (angle, options = {}) => {\n    options.angle = angle\n\n    return {\n      name: 'rotate',\n      options\n    }\n  }\n\n  operations.dropshadow = (options = {}) => {\n    return {\n      name: 'dropshadow',\n      options\n    }\n  }\n\n  operations.trim = (options = {}) => {\n    return {\n      name: 'trim',\n      options\n    }\n  }\n\n  operations.crop = (width, height, options = {}) => {\n    options.width = width\n    options.height = height\n\n    return {\n      name: 'crop',\n      options\n    }\n  }\n\n  operations.noop = () => {\n    return {\n      name: 'noop'\n    }\n  }\n\n  operations.composition = (width, height, mode, options = {}) => {\n    options.width = width\n    options.height = height\n    options.mode = mode\n\n    return {\n      name: 'composition',\n      options\n    }\n  }\n\n  operations.blur = (sigma, radius) => {\n    const options = { sigma, radius }\n\n    return {\n      name: 'blur',\n      options\n    }\n  }\n\n  /**\n   * Get a list of available stack operations.\n   *\n   * ```js\n   * rokka.operations.list()\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @return {Promise}\n   */\n  operations.list = () => {\n    return state.request('GET', 'operations', null, null, {\n      noAuthHeaders: true\n    })\n  }\n\n  return {\n    operations\n  }\n}\n","/**\n * ### Organizations\n *\n * @module organizations\n */\nexport default state => {\n  const organizations = {}\n\n  /**\n   * Get a list of organizations.\n   *\n   * ```js\n   * rokka.organizations.get('myorg')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  name organization\n   * @return {Promise}\n   */\n  organizations.get = name => {\n    return state.request('GET', `organizations/${name}`)\n  }\n\n  /**\n   * Create an organization.\n   *\n   * ```js\n   * rokka.organizations.create('myorg', 'billing@example.org', 'Organization Inc.')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  name         organization\n   * @param  {string}  billingEmail email used for billing\n   * @param  {string}  displayName  pretty name\n   * @return {Promise}\n   */\n  organizations.create = (name, billingEmail, displayName) => {\n    return state.request('PUT', `organizations/${name}`, {\n      billing_email: billingEmail,\n      display_name: displayName\n    })\n  }\n\n  return {\n    organizations\n  }\n}\n","/**\n * ### expressions\n *\n * @module expressions\n */\nexport default state => {\n  const expressions = {}\n\n  expressions.default = (expression, options) => {\n    return { expression, overrides: { options } }\n  }\n\n  return {\n    expressions\n  }\n}\n","import { isStream } from '../utils'\n\n/**\n * ### Source Images\n *\n * @module sourceimages\n */\nexport default state => {\n  const sourceimages = {\n    meta: {}\n  }\n\n  /**\n   * Get a list of source images.\n   *\n   * By default, listing sourceimages sorts them by created date descending.\n   *\n   * ```js\n   * rokka.sourceimages.list('myorg')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * Searching for images can be achieved using the `search` parameter.\n   * Supported are predefined fields like `height`, `name` etc. but also user metadata.\n   * If you search for user metadata, the field name has to be prefixed with `user:TYPE`.\n   * All fields are combined with an AND. OR/NOT is not possible.\n   *\n   * Example:\n   *\n   * ```js\n   * const search = {\n   *   'user:int:id': '42',\n   *   'height': '64'\n   * }\n   * rokka.sourceimages.list('myorg', { search: search })\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * The search also supports range and wildcard queries.\n   * Check out [the rokka documentation](https://rokka.io/documentation/references/searching-images.html) for more.\n   *\n   * Sorting works with user metadata as well and can be passed as either an array or as a\n   * comma separated string.\n   *\n   * @authenticated\n   * @param  {string} organization  name\n   * @param  {Object} params Query string params (limit, offset, sort and search)\n   * @return {Promise}\n   */\n  sourceimages.list = (\n    organization,\n    {\n      limit = null,\n      offset = null,\n      sort = null,\n      search = null,\n      facets = null,\n      deleted = null\n    } = {}\n  ) => {\n    let queryParams = {}\n\n    if (limit !== null) {\n      queryParams.limit = limit\n    }\n    if (offset !== null) {\n      queryParams.offset = offset\n    }\n    if (facets !== null) {\n      queryParams.facets = facets\n    }\n    if (deleted !== null) {\n      queryParams.deleted = deleted\n    }\n\n    if (sort !== null) {\n      if (Array.isArray(sort)) {\n        sort = sort.join(',')\n      }\n      queryParams.sort = sort\n    }\n    if (search !== null) {\n      queryParams = Object.assign(queryParams, search)\n    }\n\n    return state.request(\n      'GET',\n      `sourceimages/${organization}`,\n      null,\n      queryParams\n    )\n  }\n\n  /**\n   * Get information of a source image by hash.\n   *\n   * ```js\n   * rokka.sourceimages.get('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  hash         image hash\n   * @param  {Object}  queryParams  like {deleted: true}\n   * @return {Promise}\n   */\n  sourceimages.get = (organization, hash, queryParams = {}) => {\n    return state.request(\n      'GET',\n      `sourceimages/${organization}/${hash}`,\n      null,\n      queryParams\n    )\n  }\n\n  /**\n   * Get information of a source image by its binary hash.\n   *\n   * ```js\n   * rokka.sourceimages.getWithBinaryHash('myorg', 'b23e17047329b417d3902dc1a5a7e158a3ee822a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  binaryHash   binary image hash\n   * @return {Promise}\n   */\n  sourceimages.getWithBinaryHash = (organization, binaryHash) => {\n    const queryParams = { binaryHash: binaryHash }\n\n    return state.request(\n      'GET',\n      `sourceimages/${organization}`,\n      null,\n      queryParams\n    )\n  }\n\n  /**\n   * Download image by hash.\n   *\n   * ```js\n   * rokka.sourceimages.download('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  hash         image hash\n   * @return {Promise}\n   */\n  sourceimages.download = (organization, hash) => {\n    return state.request('GET', `sourceimages/${organization}/${hash}/download`)\n  }\n\n  /**\n   * Autolabels an image.\n   *\n   * You need to be a paying customer to be able to use this.\n   *\n   * ```js\n   * rokka.sourceimages.autolabel('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  hash         image hash\n   * @return {Promise}\n   */\n  sourceimages.autolabel = (organization, hash) => {\n    return state.request(\n      'POST',\n      `sourceimages/${organization}/${hash}/autolabel`\n    )\n  }\n\n  /**\n   * Upload an image.\n   *\n   * ```js\n   * const file = require('fs').createReadStream('picture.png');\n   * rokka.sourceimages.create('myorg', 'picture.png', file)\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * With directly adding metadata:\n   *\n   * ```\n   * rokka.sourceimages.create('myorg', 'picture.png', file, {'meta_user': {'foo': 'bar'}})\n   * ```\n   *\n   * @authenticated\n   * @param  {string} organization    name\n   * @param  {string} fileName        file name\n   * @param  {*}      binaryData      either a readable stream (in node.js only) or a binary string\n   * @param  {Object} [metadata=null] optional, metadata to be added, either user or dynamic\n   * @param  {{optimize_source: bool}} [options={}] Optional: only {optimize_source: true/false} yet, false is default\n   * @return {Promise}\n   */\n  sourceimages.create = (\n    organization,\n    fileName,\n    binaryData,\n    metadata = null,\n    options = {}\n  ) => {\n    const config = {\n      multipart: true\n    }\n\n    return new Promise(resolve => {\n      // Stream and Buffer are only supported by node.js and not browsers natively\n      // We just asume that a browser based solution will provide the binaryData\n      // of the image as String. But patches are welcome for stream alternatives\n      // in browsers\n      if (isStream(binaryData)) {\n        const chunks = []\n        binaryData.on('data', chunk => chunks.push(chunk))\n        binaryData.on('end', () => resolve(Buffer.concat(chunks)))\n      } else {\n        resolve(binaryData)\n      }\n    }).then(data => {\n      const formData = {\n        ...options\n      }\n      if (metadata !== null) {\n        Object.keys(metadata).forEach(function (o) {\n          const data = metadata[o]\n          formData[o + '[0]'] =\n            typeof data === 'string' ? data : JSON.stringify(data)\n        })\n      }\n      const payload = {\n        name: 'filedata',\n        formData: formData,\n        filename: fileName,\n        contents: data\n      }\n      return state.request(\n        'POST',\n        `sourceimages/${organization}`,\n        payload,\n        null,\n        config\n      )\n    })\n  }\n\n  /**\n   * Upload an image by url.\n   *\n   * ```js\n   * rokka.sourceimages.createByUrl('myorg', 'https://rokka.rokka.io/dynamic/f4d3f334ba90d2b4b00e82953fe0bf93e7ad9912.png')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * With directly adding metadata:\n   *\n   * ```\n   * rokka.sourceimages.createByUrl('myorg',  'https://rokka.rokka.io/dynamic/f4d3f334ba90d2b4b00e82953fe0bf93e7ad9912.png', {'meta_user': {'foo': 'bar'}})\n   * ```\n   *\n   * @authenticated\n   * @param  {string} organization     name\n   * @param  {string} url              The URL to the remote image\n   * @param  {Object} [metadata=null]  optional, metadata to be added, either user or dynamic\n   * @param  {{optimize_source: bool}} [options={}] Optional: only {optimize_source: true/false} yet, false is default\n   * @return {Promise}\n   */\n  sourceimages.createByUrl = (\n    organization,\n    url,\n    metadata = null,\n    options = {}\n  ) => {\n    const config = {\n      form: true\n    }\n\n    const formData = {\n      'url[0]': url,\n      ...options\n    }\n    if (metadata !== null) {\n      Object.keys(metadata).forEach(function (o) {\n        const data = metadata[o]\n        formData[o + '[0]'] =\n          typeof data === 'string' ? data : JSON.stringify(data)\n      })\n    }\n\n    return state.request(\n      'POST',\n      `sourceimages/${organization}`,\n      formData,\n      null,\n      config\n    )\n  }\n\n  /**\n   * Delete image by hash.\n   *\n   * ```js\n   * rokka.sourceimages.delete('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  hash         image hash\n   * @return {Promise}\n   */\n  sourceimages.delete = (organization, hash) => {\n    return state.request('DELETE', `sourceimages/${organization}/${hash}`)\n  }\n\n  /**\n   * Delete source images by its binary hash.\n   *\n   * ```js\n   * rokka.sourceimages.deleteWithBinaryHash('myorg', 'b23e17047329b417d3902dc1a5a7e158a3ee822a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  binaryHash   binary image hash\n   * @return {Promise}\n   */\n  sourceimages.deleteWithBinaryHash = (organization, binaryHash) => {\n    const queryParams = { binaryHash: binaryHash }\n\n    return state.request(\n      'DELETE',\n      `sourceimages/${organization}`,\n      null,\n      queryParams\n    )\n  }\n\n  /**\n   * Restore image by hash.\n   *\n   * ```js\n   * rokka.sourceimages.restore('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  hash         image hash\n   * @return {Promise}\n   */\n  sourceimages.restore = (organization, hash) => {\n    return state.request('POST', `sourceimages/${organization}/${hash}/restore`)\n  }\n\n  /**\n   * Copy image by hash to another org.\n   *\n   * ```js\n   * rokka.sourceimages.copy('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a', 'anotherorg', true)\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization            the org the image is copied from\n   * @param  {string}  hash                    image hash\n   * @param  {string}  destinationOrganization the org the image is copied to\n   * @param  {boolean} [overwrite=true]     if an existing image should be overwritten\n   *\n   * @return {Promise}\n   */\n  sourceimages.copy = (\n    organization,\n    hash,\n    destinationOrganization,\n    overwrite = true\n  ) => {\n    const headers = { Destination: destinationOrganization }\n    if (!overwrite) {\n      headers.Overwrite = 'F'\n    }\n    return state.request(\n      'COPY',\n      `sourceimages/${organization}/${hash}`,\n      null,\n      null,\n      { headers }\n    )\n  }\n\n  /**\n   * ### Dynamic metadata\n   *\n   * See [the dynamic metadata documentation](https://rokka.io/documentation/references/dynamic-metadata.html) for\n   * more information.\n   */\n\n  /**\n   * Set the subject area of a source image.\n   *\n   * The [subject area of an image](https://rokka.io/documentation/references/dynamic-metadata.html#subject-area) is\n   * used when applying the [crop operation](https://rokka.io/documentation/references/operations.html#crop) with the\n   * `auto` anchor to center the cropping box around the subject area.\n   *\n   * ```js\n   * rokka.sourceimages.setSubjectArea('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a', {\n   *   x: 100,\n   *   y: 100,\n   *   width: 50,\n   *   height: 50\n   * },\n   * {\n   *   deletePrevious: false\n   * }).then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @param {string} organization  name\n   * @param {string} hash          image hash\n   * @param {{width: number, height: number, x: number, y: number}} coords x, y starting from top left\n   * @param {{deletePrevious: bool}} [options={}] Optional: only {deletePrevious: true/false} yet, false is default\n   * @returns {Promise}\n   */\n  sourceimages.setSubjectArea = (organization, hash, coords, options = {}) => {\n    options.deletePrevious = options.deletePrevious ? 'true' : 'false'\n\n    return state.request(\n      'PUT',\n      'sourceimages/' +\n        organization +\n        '/' +\n        hash +\n        '/meta/dynamic/subject_area',\n      coords,\n      options\n    )\n  }\n\n  /**\n   * Removes the subject area from a source image.\n   *\n   * ```js\n   * rokka.sourceimages.removeSubjectArea('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @param {string} organization\n   * @param {string} hash\n   * @param {{deletePrevious: bool}} [options={}] Optional: only {deletePrevious: true/false} yet, false is default\n   * @return {Promise}\n   */\n  sourceimages.removeSubjectArea = (organization, hash, options = {}) => {\n    options.deletePrevious = options.deletePrevious ? 'true' : 'false'\n\n    return state.request(\n      'DELETE',\n      `sourceimages/${organization}/${hash}/meta/dynamic/subject_area`,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### User metadata\n   *\n   * See [the user metadata documentation](https://rokka.io/documentation/references/user-metadata.html)\n   * for more information.\n   */\n\n  /**\n   * Add user metadata to a source image.\n   *\n   * See [the user metadata documentation](https://rokka.io/documentation/references/user-metadata.html)\n   * for an explanation.\n   *\n   * ```js\n   * rokka.sourceimages.meta.add('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a', {\n   *   somefield: 'somevalue',\n   *   'int:some_number': 0,\n   *   'delete_this': null\n   * }).then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param {string} organization name\n   * @param {string} hash         image hash\n   * @param {object} data         metadata to add to the image\n   * @return {Promise}\n   */\n  sourceimages.meta.add = (organization, hash, data) => {\n    return state.request(\n      'PATCH',\n      `sourceimages/${organization}/${hash}/meta/user`,\n      data\n    )\n  }\n\n  /**\n   * Replace user metadata of a source image with the passed data.\n   *\n   * See [the user metadata documentation](https://rokka.io/documentation/references/user-metadata.html)\n   * for an explanation.\n   *\n   * ```js\n   * rokka.sourceimages.meta.replace('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a', {\n   *   somefield: 'somevalue',\n   *   'int:some_number': 0\n   * }).then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param {string} organization name\n   * @param {string} hash         image hash\n   * @param {object} data         new metadata\n   * @return {Promise}\n   */\n  sourceimages.meta.replace = (organization, hash, data) => {\n    return state.request(\n      'PUT',\n      `sourceimages/${organization}/${hash}/meta/user`,\n      data\n    )\n  }\n\n  /**\n   * Replace user metadata of a source image with the passed data.\n   *\n   * See [the user metadata documentation](https://rokka.io/documentation/references/user-metadata.html)\n   * for an explanation.\n   *\n   * ```js\n   * rokka.sourceimages.meta.delete('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * If the third parameter (field) is specified, it will just delete this field.\n   *\n   * @authenticated\n   * @param {string} organization name\n   * @param {string} hash         image hash\n   * @param {string} [field=null] optional field to delete\n   * @return {Promise}\n   */\n  sourceimages.meta.delete = (organization, hash, field = null) => {\n    const fieldpath = field ? `/${field}` : ''\n    return state.request(\n      'DELETE',\n      `sourceimages/${organization}/${hash}/meta/user${fieldpath}`\n    )\n  }\n\n  return {\n    sourceimages\n  }\n}\n","/**\n * ### Stack options\n *\n * @module stackoptions\n */\nexport default state => {\n  const stackoptions = {}\n\n  /**\n   * Returns a json-schema like definition of options which can be set on a stack.\n   *\n   * ```js\n   * rokka.stackoptions.get()\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @return {Promise}\n   */\n  stackoptions.get = () => {\n    return state.request('GET', 'stackoptions', null, null, {\n      noAuthHeaders: true\n    })\n  }\n\n  return {\n    stackoptions\n  }\n}\n","/**\n * ### Stacks\n *\n * @module stacks\n */\nexport default state => {\n  const stacks = {}\n\n  /**\n   * Get a list of available stacks.\n   *\n   * ```js\n   * rokka.stacks.list('myorg')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization  name\n   * @param  {number}  [limit=null]\n   * @param  {string}  [offset=null] cursor\n   * @return {Promise}\n   */\n  stacks.list = (organization, limit = null, offset = null) => {\n    const queryParams = {}\n\n    if (limit !== null) {\n      queryParams.limit = limit\n    }\n    if (offset !== null) {\n      queryParams.offset = offset\n    }\n\n    return state.request('GET', `stacks/${organization}`, null, queryParams)\n  }\n\n  /**\n   * Get details about a stack.\n   *\n   * ```js\n   * rokka.stacks.get('myorg', 'mystack')\n   *   .then(function(result) {})\n   *   .catch(function(result) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  name         stack name\n   * @return {Promise}\n   */\n  stacks.get = (organization, name) => {\n    return state.request('GET', `stacks/${organization}/${name}`)\n  }\n\n  /**\n   * Create a new stack.\n   *\n   * The signature of this method changed in 0.27.\n   *\n   * Using a single stack operation object (without an enclosing array) as the 3rd parameter (stackConfig) is\n   *  since version 0.27.0 not supported anymore.\n   *\n   * ```js\n   * const operations = [\n   *   rokka.operations.rotate(45),\n   *   rokka.operations.resize(100, 100)\n   * ]\n   *\n   * // stack options are optional\n   * const options = {\n   *   'jpg.quality': 80,\n   *   'webp.quality': 80\n   * }\n   *\n   * // stack expressions are optional\n   * const expressions = [\n   *   rokka.expressions.default('options.dpr > 2', { 'jpg.quality': 60, 'webp.quality': 60 })\n   * ]\n   *\n   * // query params are optional\n   * var queryParams = { overwrite: true }\n   * rokka.stacks.create(\n   *   'test',\n   *   'mystack',\n   *   { operations, options, expressions },\n   *   queryParams\n   * ).then(function(result) {})\n   *  .catch(function(err) {})\n   * ```\n   *\n   * @authenticated\n   * @param  {string}       organization name\n   * @param  {string}       name         stack name\n   * @param  {Object}       stackConfig  object with the stack config of stack operations, options and expressions.\n   * @param  {{overwrite: bool}} [params={}]  params       query params, only {overwrite: true|false} is currently supported\n   * @return {Promise}\n   */\n\n  stacks.create = (organization, name, stackConfig, params = {}, ...rest) => {\n    let queryParams = Object.assign({}, params)\n    let body = {}\n\n    // backwards compatibility for previous signature:\n    // create(organization, name, operations, options = null, overwrite = false)\n    if (Array.isArray(stackConfig)) {\n      body.operations = stackConfig\n      body.options = params\n      const _overwrite = rest.length > 0 ? rest[0] : false\n      queryParams = {}\n      if (_overwrite) {\n        queryParams.overwrite = _overwrite\n      }\n    } else {\n      body = stackConfig\n    }\n\n    return state.request(\n      'PUT',\n      `stacks/${organization}/${name}`,\n      body,\n      queryParams\n    )\n  }\n\n  /**\n   * Delete a stack.\n   *\n   * ```js\n   * rokka.stacks.delete('myorg', 'mystack')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @authenticated\n   * @param  {string}  organization name\n   * @param  {string}  name         stack name\n   * @return {Promise}\n   */\n  stacks.delete = (organization, name) => {\n    return state.request('DELETE', `stacks/${organization}/${name}`)\n  }\n\n  return {\n    stacks\n  }\n}\n","/**\n * ### Stats\n *\n * @module stats\n */\nexport default state => {\n  const stats = {}\n\n  /**\n   * Retrieve statistics about an organization.\n   *\n   * If `from` and `to` are not specified, the API will return data for the last 30 days.\n   *\n   * ```js\n   * rokka.stats.get('myorg', '2017-01-01', '2017-01-31')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @param {string} organization name\n   * @param {string} [from=null]  date in format YYYY-MM-DD\n   * @param {string} [to=null]    date in format YYYY-MM-DD\n   *\n   * @return {Promise}\n   */\n  stats.get = (organization, from = null, to = null) => {\n    return state.request('GET', `stats/${organization}`, null, {\n      from,\n      to\n    })\n  }\n\n  return {\n    stats\n  }\n}\n","/**\n * ### Users\n *\n * @module users\n */\nexport default state => {\n  const users = {}\n\n  /**\n   * Register a new user for the rokka service.\n   *\n   * ```js\n   * rokka.users.create('user@example.org')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @param {string} email address of a user\n   * @param {string} [organization = null] to create\n   * @return {Promise}\n   */\n  users.create = (email, organization = null) => {\n    return state.request('POST', 'users', { email, organization }, null, {\n      noAuthHeaders: true\n    })\n  }\n\n  /**\n   * Get user_id for current user\n   *\n   * ```js\n   * rokka.users.getId()\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @return {Promise}\n   */\n  users.getId = () => {\n    return state.request('GET', 'user').then(result => result.body.user_id)\n  }\n\n  return {\n    users\n  }\n}\n","/**\n * ### Billing\n *\n * @module billing\n */\nexport default state => {\n  const billing = {}\n\n  /**\n   * Retrieve statistics about the billing of an organization\n   *\n   * If `from` and `to` are not specified, the API will return data for the last 30 days.\n   *\n   * ```js\n   * rokka.billing.get('myorg', '2017-01-01', '2017-01-31')\n   *   .then(function(result) {})\n   *   .catch(function(err) {});\n   * ```\n   *\n   * @param {string} organization name\n   * @param {string} [from=null]  date in format YYYY-MM-DD\n   * @param {string} [to=null]    date in format YYYY-MM-DD\n   *\n   * @return {Promise}\n   */\n  billing.get = (organization, from = null, to = null) => {\n    return state.request('GET', `billing/${organization}`, null, {\n      from,\n      to\n    })\n  }\n\n  return {\n    billing\n  }\n}\n","export default (originalResponse = {}) => {\n  const response = {\n    response: originalResponse,\n    body: null,\n    get statusCode () {\n      return this.response.status\n    },\n    get statusMessage () {\n      return this.response.statusText\n    }\n  }\n  return response\n}\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n","import transport from './transport'\nimport modules from './apis'\nimport RokkaResponse from './response'\nimport queryString from 'query-string'\nimport FormData from 'form-data'\n\nconst defaults = {\n  apiHost: 'https://api.rokka.io',\n  renderHost: 'https://{organization}.rokka.io',\n  apiVersion: 1,\n  transport: {\n    requestTimeout: 30000,\n    retries: 10,\n    minTimeout: 1000,\n    maxTimeout: 10000,\n    randomize: true,\n    factor: 2\n  }\n}\n\nconst getResponseBody = async response => {\n  if (response.headers && response.json) {\n    if (response.headers.get('content-type') === 'application/json') {\n      return response.json()\n    }\n    return response.text()\n  }\n  return response.body\n}\n/**\n * Initializing the rokka client.\n *\n * ```js\n * const rokka = require('rokka')({\n *   apiKey: 'apikey',       // required for certain operations\n *   apiHost: '<url>',       // default: https://api.rokka.io\n *   apiVersion: <number>,   // default: 1\n *   renderHost: '<url>',    // default: https://{organization}.rokka.io\n *   debug: true,            // default: false\n *   transport: {\n *     requestTimeout: <number>,  // milliseconds to wait for rokka server response (default: 30000)\n *     retries: <number>,         // number of retries when API response is 429 (default: 10)\n *     minTimeout: <number>,      // minimum milliseconds between retries (default: 1000)\n *     maxTimeout: <number>,      // maximum milliseconds between retries (default: 10000)\n *     randomize: <boolean>       // randomize time between retries (default: true)\n *   }\n * });\n * ```\n *\n * All properties are optional since certain calls don't require credentials.\n *\n * @param  {Object} [config={}] configuration properties\n * @return {Object}\n *\n * @module rokka\n */\nexport default (config = {}) => {\n  if (config.debug !== null) {\n    transport.debug = config.debug\n  }\n\n  const state = {\n    // config\n    apiKey: config.apiKey,\n    apiHost: config.apiHost || defaults.apiHost,\n    apiVersion: config.apiVersion || defaults.apiVersion,\n    renderHost: config.renderHost || defaults.renderHost,\n    transportOptions: Object.assign(defaults.transport, config.transport),\n\n    // functions\n    request (method, path, payload = null, queryParams = null, options = {}) {\n      let uri = [state.apiHost, path].join('/')\n      if (\n        queryParams &&\n        !(\n          Object.entries(queryParams).length === 0 &&\n          queryParams.constructor === Object\n        )\n      ) {\n        uri += '?' + queryString.stringify(queryParams)\n      }\n      const headers = options.headers || {}\n\n      headers['Api-Version'] = state.apiVersion\n\n      if (options.noAuthHeaders !== true) {\n        if (!state.apiKey) {\n          return Promise.reject(new Error('Missing required property `apiKey`'))\n        }\n\n        headers['Api-Key'] = state.apiKey\n      }\n\n      const retryDelay = (attempt, error, response) => {\n        // from https://github.com/tim-kos/node-retry/blob/master/lib/retry.js\n        const random = state.transportOptions.randomize ? Math.random() + 1 : 1\n\n        const timeout = Math.round(\n          random *\n            state.transportOptions.minTimeout *\n            Math.pow(state.transportOptions.factor, attempt)\n        )\n        return Math.min(timeout, state.transportOptions.maxTimeout)\n      }\n\n      const request = {\n        method: method,\n        headers: headers,\n        timeout: state.transportOptions.requestTimeout,\n        retries: state.transportOptions.retries,\n        retryDelay\n      }\n      if (options.form === true) {\n        const formData = payload || {}\n        const requestData = new FormData()\n        Object.keys(formData).forEach(function (meta) {\n          requestData.append(meta, formData[meta])\n        })\n        request.body = requestData\n      } else if (options.multipart !== true) {\n        request.json = true\n        request.body = payload\n      } else {\n        const formData = payload.formData || {}\n        const requestData = new FormData()\n\n        requestData.append(payload.name, payload.contents, payload.filename)\n\n        Object.keys(formData).forEach(function (meta) {\n          requestData.append(meta, JSON.stringify(formData[meta]))\n        })\n\n        request.body = requestData\n      }\n\n      if (request.json && request.body && typeof request.body === 'object') {\n        request.body = JSON.stringify(request.body)\n      }\n\n      const t = transport(uri, request)\n      return t.then(async response => {\n        const rokkaResponse = RokkaResponse(response)\n        rokkaResponse.body = await getResponseBody(response)\n        if (response.status >= 400) {\n          rokkaResponse.error = rokkaResponse.body\n          rokkaResponse.message =\n            response.status + ' - ' + JSON.stringify(rokkaResponse.body)\n          throw rokkaResponse\n        }\n        return rokkaResponse\n      })\n    }\n  }\n\n  return Object.assign({}, modules(state))\n}\n"],"names":["url","options","retries","retryDelay","retryOn","undefined","isPositiveInteger","ArgumentError","Array","isArray","Promise","resolve","reject","wrappedFetch","attempt","fetch","then","response","indexOf","status","retry","catch","error","delay","setTimeout","value","Number","isInteger","message","this","name","state","render","getUrl","organization","hash","format","mixed","renderHost","replace","operations","map","operation","Object","keys","k","join","stringifyOperations","assign","ROLES","READ","WRITE","UPLOAD","ADMIN","memberships","create","userId","roles","forEach","role","key","Error","path","request","delete","createWithNewUser","list","get","resize","width","height","autorotate","rotate","angle","dropshadow","trim","crop","noop","composition","mode","blur","sigma","radius","noAuthHeaders","organizations","billingEmail","displayName","billing_email","display_name","expressions","default","expression","overrides","sourceimages","meta","limit","offset","sort","search","facets","deleted","queryParams","getWithBinaryHash","binaryHash","download","autolabel","fileName","binaryData","metadata","config","multipart","stream","pipe","chunks","on","chunk","push","Buffer","concat","data","formData","o","JSON","stringify","payload","filename","contents","createByUrl","url[0]","form","deleteWithBinaryHash","restore","copy","destinationOrganization","overwrite","headers","Destination","Overwrite","setSubjectArea","coords","deletePrevious","removeSubjectArea","add","field","fieldpath","stackoptions","stacks","stackConfig","params","rest","body","_overwrite","length","stats","from","to","users","email","getId","result","user_id","billing","originalResponse","statusCode","statusMessage","statusText","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","err","left","slice","right","prototype","call","decode","input","tokens","match","i","encodedURI","TypeError","replaceMap","%FE%FF","%FF%FE","exec","entries","customDecodeURIComponent","string","separator","separatorIndex","validateArrayFormatSeparator","encode","strict","encodeURIComponent","x","charCodeAt","toString","toUpperCase","decodeComponent","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","parseBooleans","toLowerCase","parse","query","arrayFormat","arrayFormatSeparator","formatter","accumulator","includes","isEncodedArray","newValue","item","parserForArrayFormat","ret","param","splitOnFirst","reduce","Boolean","keysSorter","a","b","exports","object","shouldFilter","skipNull","skipEmptyString","index","encoderForArrayFormat","objectCopy","filter","url_","parseFragmentIdentifier","fragmentIdentifier","queryFromUrl","parsedQueryFromUrl","queryString","getHash","defaults","requestTimeout","minTimeout","maxTimeout","randomize","factor","debug","transport","apiKey","apiHost","apiVersion","transportOptions","[object Object]","method","uri","constructor","timeout","random","Math","round","pow","min","requestData","FormData","append","json","async","rokkaResponse","RokkaResponse","text","getResponseBody","modules"],"mappings":"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"}